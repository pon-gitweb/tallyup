import { useFocusEffect } from "@react-navigation/native";
import useDebouncedValue from "../../utils/useDebouncedValue";
import React, { useEffect, useMemo, useState } from 'react';
import { View, Text, FlatList, TextInput, TouchableOpacity, Alert, ActivityIndicator, StyleSheet, Modal } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import {
  collection, query, orderBy, limit, getDocs, addDoc, updateDoc, deleteDoc, doc, serverTimestamp
} from 'firebase/firestore';
import { db } from '../../services/firebase';
import { useVenueId } from '../../context/VenueProvider';

type Dept = { id: string; name: string };
type AreaDoc = { startedAt?: any; completedAt?: any };
type DeptWithStatus = Dept & { status: 'Completed' | 'In progress' | 'Not started' };

export default function DepartmentSelectionScreen() {
  const nav = useNavigation<any>();
  const venueId = useVenueId();

  const [loading, setLoading] = useState(true);
  const [departments, setDepartments] = useState<DeptWithStatus[]>([]);
  const [search, setSearch] = useState('');

  const [adding, setAdding] = useState(false);
  const [newName, setNewName] = useState('');

  const [renaming, setRenaming] = useState<Dept | null>(null);
  const [renameTo, setRenameTo] = useState('');

  async function computeDeptStatus(dep: Dept): Promise<DeptWithStatus> {
    if (!venueId) return { ...dep, status: 'Not started' };
    const areasSnap = await getDocs(collection(db, 'venues', venueId, 'departments', dep.id, 'areas'));
    if (areasSnap.empty) return { ...dep, status: 'Not started' };

    let anyStarted = false;
    let allCompleted = true;
    areasSnap.forEach((d) => {
      const a = d.data() as AreaDoc;
      if (a?.startedAt) anyStarted = true;
      if (!a?.completedAt) allCompleted = false;
    });

    if (allCompleted) return { ...dep, status: 'Completed' };
    if (anyStarted) return { ...dep, status: 'In progress' };
    return { ...dep, status: 'Not started' };
  }

  async function reload() {
    if (!venueId) { setDepartments([]); setLoading(false); return; }
    try {
      setLoading(true);
      const colRef = collection(db, 'venues', venueId, 'departments');
      const snap = await getDocs(query(colRef, orderBy('name'), limit(500)));
      const base = snap.docs.map(d => ({ id: d.id, name: (d.data() as any)?.name || d.id }));
      const withStatuses: DeptWithStatus[] = [];
      for (const dep of base) withStatuses.push(await computeDeptStatus(dep));
      setDepartments(withStatuses);
    } catch (e) {
      console.log('[Departments] reload error', (e as any)?.message);
      setDepartments([]);
    } finally {
      setLoading(false);
    }
  }
  useEffect(() => { reload(); }, [venueId]);

useFocusEffect(React.useCallback(() => { reload(); return () => {}; }, [venueId]));
  const filtered = useMemo(() => {
    const n = search.trim().toLowerCase();
    if (!n) return departments;
    return departments.filter(d => d.name.toLowerCase().includes(n));
  }, [departments, search]);

  async function onAdd() {
    const name = newName.trim();
    if (!name) { Alert.alert('Missing name', 'Please enter a department name.'); return; }
    try {
      if (!venueId) return;
      const now = serverTimestamp();
      await addDoc(collection(db, 'venues', venueId, 'departments'), { name, createdAt: now, updatedAt: now });
      setNewName('');
      setAdding(false);
      await reload();
    } catch (e: any) { Alert.alert('Create failed', e?.message ?? 'Unknown error'); }
  }

  async function onRenameConfirm() {
    if (!renaming || !venueId) return;
    const newLabel = renameTo.trim();
    if (!newLabel) { Alert.alert('Missing name', 'Please enter a department name.'); return; }
    try {
      const dref = doc(db, 'venues', venueId, 'departments', renaming.id);
      await updateDoc(dref, { name: newLabel, updatedAt: serverTimestamp() });
      setRenaming(null); setRenameTo(''); await reload();
    } catch (e: any) { Alert.alert('Rename failed', e?.message ?? 'Unknown error'); }
  }

  async function onDelete(dep: Dept) {
    if (!venueId) return;
    let proceed = false;
    await new Promise<void>((resolve) => {
      Alert.alert('Delete department', `Delete “${dep.name}”? This cannot be undone.`, [
        { text: 'Cancel', style: 'cancel', onPress: () => resolve() },
        { text: 'Delete', style: 'destructive', onPress: () => { proceed = true; resolve(); } },
      ]);
    });
    if (!proceed) return;

    try { await deleteDoc(doc(db, 'venues', venueId, 'departments', dep.id)); await reload(); }
    catch (e: any) { Alert.alert('Delete failed', e?.message ?? 'Unknown error'); }
  }

  function Row({ item }: { item: DeptWithStatus }) {
    const pill = {
      'Completed':  { bg: '#E8F5E9', fg: '#2E7D32' },
      'In progress': { bg: '#FFF8E1', fg: '#FF6F00' },
      'Not started': { bg: '#ECEFF1', fg: '#455A64' },
    }[item.status];

    return (
      <TouchableOpacity
        style={styles.row}
        onPress={() => nav.navigate('Areas', { venueId, departmentId: item.id })}
      >
        <View style={{ flex: 1 }}>
          <Text style={styles.name}>{item.name}</Text>
        </View>
        <View style={[styles.statusPill, { backgroundColor: pill.bg }]}>
          <Text style={{ color: pill.fg, fontWeight: '700' }}>{item.status}</Text>
        </View>
        <TouchableOpacity style={styles.smallBtn} onPress={() => { setRenaming(item); setRenameTo(item.name); }}>
          <Text style={styles.smallBtnText}>Rename</Text>
        </TouchableOpacity>
        <TouchableOpacity style={[styles.smallBtn, { backgroundColor: '#FF3B30' }]} onPress={() => onDelete(item)}>
          <Text style={[styles.smallBtnText, { color: 'white' }]}>Del</Text>
        </TouchableOpacity>
      </TouchableOpacity>
    );
  }

  return (
    <View style={styles.wrap}>
      <Text style={styles.title}>Departments</Text>

      <View style={styles.searchRow}>
        <TextInput placeholder="Search departments…" value={search} onChangeText={setSearch} style={styles.search} />
        <TouchableOpacity style={styles.primaryBtn} onPress={() => setAdding(true)}>
          <Text style={styles.primaryText}>New</Text>
        </TouchableOpacity>
      </View>

      {loading ? (
        <View style={styles.center}><ActivityIndicator /><Text>Loading…</Text></View>
      ) : (
        <FlatList
          data={filtered}
          keyExtractor={d => d.id}
          ItemSeparatorComponent={() => <View style={{ height: 8 }} />}
          contentContainerStyle={{ paddingBottom: 40 }}
          renderItem={Row}
        />
      )}

      {/* Add modal */}
      <Modal visible={adding} animationType="slide" transparent onRequestClose={() => setAdding(false)}>
        <View style={styles.modalBackdrop}>
          <View style={styles.modalCard}>
            <Text style={styles.modalTitle}>New department</Text>
            <TextInput autoFocus placeholder="Department name" value={newName} onChangeText={setNewName} style={styles.input} />
            <View style={styles.modalRow}>
              <TouchableOpacity style={[styles.secondaryBtn]} onPress={() => setAdding(false)}>
                <Text style={styles.secondaryText}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity style={[styles.primaryBtn, !newName.trim() && styles.disabled]} onPress={onAdd} disabled={!newName.trim()}>
                <Text style={styles.primaryText}>Create</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* Rename modal */}
      <Modal visible={!!renaming} animationType="slide" transparent onRequestClose={() => setRenaming(null)}>
        <View style={styles.modalBackdrop}>
          <View style={styles.modalCard}>
            <Text style={styles.modalTitle}>Rename department</Text>
            <TextInput autoFocus placeholder="New name" value={renameTo} onChangeText={setRenameTo} style={styles.input} />
            <View style={styles.modalRow}>
              <TouchableOpacity style={styles.secondaryBtn} onPress={() => setRenaming(null)}>
                <Text style={styles.secondaryText}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity style={[styles.primaryBtn, !renameTo.trim() && styles.disabled]} onPress={onRenameConfirm} disabled={!renameTo.trim()}>
                <Text style={styles.primaryText}>Save</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  wrap: { flex: 1, padding: 16, backgroundColor: 'white' },
  title: { fontSize: 22, fontWeight: '700', marginBottom: 12 },
  searchRow: { flexDirection: 'row', alignItems: 'center', gap: 8, marginBottom: 12 },
  search: { flex: 1, borderWidth: 1, borderColor: '#E5E7EB', borderRadius: 10, paddingHorizontal: 12, height: 40, backgroundColor: '#F9FAFB' },
  primaryBtn: { backgroundColor: '#0A84FF', paddingHorizontal: 16, height: 40, borderRadius: 10, alignItems: 'center', justifyContent: 'center' },
  primaryText: { color: 'white', fontWeight: '700' },
  secondaryBtn: { paddingHorizontal: 16, height: 40, borderRadius: 10, alignItems: 'center', justifyContent: 'center', borderWidth: 1, borderColor: '#CBD5E1' },
  secondaryText: { color: '#0A84FF', fontWeight: '700' },
  disabled: { opacity: 0.5 },
  center: { alignItems: 'center', justifyContent: 'center', marginTop: 24, gap: 8 },
  row: { flexDirection: 'row', alignItems: 'center', gap: 8, padding: 12, borderWidth: 1, borderColor: '#E5E7EB', borderRadius: 12 },
  name: { fontSize: 16, fontWeight: '600' },
  smallBtn: { paddingHorizontal: 10, height: 34, borderRadius: 8, alignItems: 'center', justifyContent: 'center', borderWidth: 1, borderColor: '#CBD5E1' },
  smallBtnText: { fontWeight: '700', color: '#0A84FF' },
  input: { borderWidth: 1, borderColor: '#E5E7EB', borderRadius: 10, paddingHorizontal: 12, height: 40, backgroundColor: '#F9FAFB' },
  modalBackdrop: { flex: 1, backgroundColor: 'rgba(0,0,0,0.35)', alignItems: 'center', justifyContent: 'center', padding: 24 },
  modalCard: { width: '100%', backgroundColor: 'white', borderRadius: 16, padding: 16, gap: 12 },
  modalTitle: { fontSize: 18, fontWeight: '700' },
  modalRow: { flexDirection: 'row', justifyContent: 'flex-end', gap: 12 },
  statusPill: { borderRadius: 999, paddingHorizontal: 10, paddingVertical: 6 },
});
