// @ts-nocheck
import React, { useEffect, useMemo, useState, useCallback } from 'react';
import {
  View, Text, StyleSheet, TouchableOpacity, RefreshControl, FlatList, SectionList,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import {
  getFirestore, collection, onSnapshot, query as fsQuery, orderBy,
} from 'firebase/firestore';
import { useVenueId } from '../../context/VenueProvider';

type OrderRow = {
  id: string;
  supplierId?: string | null;
  supplierName?: string | null;
  status?: string | null;
  displayStatus?: string | null;
  createdAt?: any;
  createdAtClientMs?: number | null;
  submittedAt?: any;
  receivedAt?: any;
  linesCount?: number | null;
  total?: number | null;
};

const S = StyleSheet.create({
  wrap:{flex:1,backgroundColor:'#fff'},
  top:{paddingHorizontal:16,paddingVertical:12,borderBottomWidth:StyleSheet.hairlineWidth,borderColor:'#E5E7EB',flexDirection:'row',alignItems:'center',justifyContent:'space-between'},
  title:{fontSize:22,fontWeight:'800'},
  segWrap:{flexDirection:'row',borderWidth:1,borderColor:'#E5E7EB',borderRadius:999,overflow:'hidden'},
  segBtn:{paddingVertical:8,paddingHorizontal:12,backgroundColor:'#fff'},
  segActive:{backgroundColor:'#111827'},
  segText:{fontSize:13,fontWeight:'800',color:'#111827'},
  segTextActive:{color:'#fff'},
  addBtn:{backgroundColor:'#111827',paddingVertical:8,paddingHorizontal:12,borderRadius:10},
  addText:{color:'#fff',fontWeight:'800'},
  row:{flexDirection:'row',alignItems:'center',justifyContent:'space-between',paddingHorizontal:16,paddingVertical:12,borderBottomWidth:StyleSheet.hairlineWidth,borderColor:'#E5E7EB'},
  left:{flex:1},
  rowTitle:{fontSize:16,fontWeight:'700'},
  rowSub:{color:'#6B7280',marginTop:2},
  pill:{marginTop:6,alignSelf:'flex-start',paddingHorizontal:8,paddingVertical:3,borderRadius:999,backgroundColor:'#F3F4F6'},
  pillText:{fontSize:11,fontWeight:'700',color:'#374151'},
  smallBtn:{backgroundColor:'#111827',paddingVertical:6,paddingHorizontal:10,borderRadius:8},
  smallBtnText:{color:'#fff',fontSize:12,fontWeight:'700'},
  empty:{padding:24,alignItems:'center'},
  emptyText:{color:'#6B7280'},

  sectionHeader:{backgroundColor:'#F9FAFB',paddingHorizontal:16,paddingVertical:6,borderBottomWidth:StyleSheet.hairlineWidth,borderColor:'#EEE'},
  sectionTitle:{fontSize:12,fontWeight:'800',color:'#6B7280'},
});

const STATUS_GROUPS = {
  drafts: (s:string)=>s==='draft',
  submitted: (s:string)=>['submitted','sent','placed','approved','awaiting','processing'].includes(s),
  received: (s:string)=>['received','complete','closed'].includes(s),
};

function ms(v:any):number {
  if (!v) return 0;
  if (typeof v === 'number') return v;
  if (v?.toMillis) try { return v.toMillis(); } catch {}
  return 0;
}

function groupReceived(rows: OrderRow[]) {
  const now = Date.now();
  const startOfDay = (t:number) => new Date(new Date(t).toDateString()).getTime();
  const oneDay = 24*60*60*1000;
  const startOfWeek = (t:number) => {
    const d = new Date(t);
    const day = (d.getDay() + 6) % 7; // Mon=0
    const start = new Date(d); start.setDate(d.getDate() - day);
    return startOfDay(start.getTime());
  };

  const recentThreshold = now - 7*oneDay;

  // Build buckets: key -> {title, data[]}
  const map: Record<string, { title: string, data: OrderRow[] }> = {};

  rows.forEach(r => {
    const t = ms(r.receivedAt) || ms(r.submittedAt) || ms(r.createdAt) || r.createdAtClientMs || 0;
    if (t >= recentThreshold) {
      // Group by day
      const k = String(startOfDay(t));
      if (!map[k]) {
        const label = new Date(t).toLocaleDateString();
        map[k] = { title: label, data: [] };
      }
      map[k].data.push(r);
    } else {
      // Group by week
      const k = 'W'+String(startOfWeek(t));
      if (!map[k]) {
        const start = startOfWeek(t);
        const end = start + 6*oneDay;
        const label = `Week of ${new Date(start).toLocaleDateString()} – ${new Date(end).toLocaleDateString()}`;
        map[k] = { title: label, data: [] };
      }
      map[k].data.push(r);
    }
  });

  // Sort sections by recency
  const sections = Object.values(map).sort((a,b) => {
    const ta = Math.max(...a.data.map(x => ms(x.receivedAt)||ms(x.submittedAt)||ms(x.createdAt)||x.createdAtClientMs||0));
    const tb = Math.max(...b.data.map(x => ms(x.receivedAt)||ms(x.submittedAt)||ms(x.createdAt)||x.createdAtClientMs||0));
    return tb - ta;
  });

  // Sort items inside each section by recency
  sections.forEach(sec => sec.data.sort((a,b) => {
    const ta = ms(a.receivedAt)||ms(a.submittedAt)||ms(a.createdAt)||a.createdAtClientMs||0;
    const tb = ms(b.receivedAt)||ms(b.submittedAt)||ms(b.createdAt)||b.createdAtClientMs||0;
    return tb - ta;
  }));

  return sections;
}

export default function OrdersScreen(){
  const nav = useNavigation<any>();
  const venueId = useVenueId();
  const db = getFirestore();

  const [tab,setTab]=useState<'drafts'|'submitted'|'received'>('drafts');
  const [rowsAll,setRowsAll]=useState<OrderRow[]>([]);
  const [refreshing,setRefreshing]=useState(false);

  useEffect(()=>{
    if(!venueId) return;
    const ref = collection(db,'venues',venueId,'orders');
    const q = fsQuery(ref, orderBy('createdAt','desc'));
    const unsub = onSnapshot(q,(snap)=>{
      const out:OrderRow[] = [];
      snap.forEach((doc)=>{
        const d:any = doc.data()||{};
        const s = String(d.status||d.displayStatus||'draft').toLowerCase();
        out.push({
          id:doc.id,
          supplierId:d.supplierId??null,
          supplierName:d.supplierName??'Supplier',
          status:s,
          displayStatus:d.displayStatus??s,
          createdAt:d.createdAt??null,
          createdAtClientMs:Number.isFinite(d.createdAtClientMs)?Number(d.createdAtClientMs):null,
          submittedAt:d.submittedAt??null,
          receivedAt:d.receivedAt??null,
          linesCount:Number.isFinite(d.linesCount)?Number(d.linesCount):null,
          total:Number.isFinite(d.total)?Number(d.total):null,
        });
      });
      // Sort locally by timestamp (server, then client fallback)
      out.sort((a,b)=>{
        const ta = ms(a.createdAt) || a.createdAtClientMs || 0;
        const tb = ms(b.createdAt) || b.createdAtClientMs || 0;
        return tb - ta;
      });
      setRowsAll(out);
    },()=>setRowsAll([]));
    return ()=>unsub();
  },[db,venueId]);

  const rows=useMemo(()=>{
    const pick=STATUS_GROUPS[tab];
    return rowsAll.filter(r=>pick(String(r.status||'draft')));
  },[rowsAll,tab]);

  const openRow=useCallback((row:OrderRow)=>{
    const s=String(row.status||'draft');
    if(s==='draft'){
      console.log('[Orders] openRow → OrderEditor', row.id);
      nav.navigate('OrderEditor',{orderId:row.id,mode:'edit'});
    }else{
      console.log('[Orders] openRow → OrderDetail', row.id);
      nav.navigate('OrderDetail',{orderId:row.id});
    }
  },[nav]);

  const startReceive=useCallback((row:OrderRow)=>{
    console.log('[Orders] startReceive', row.id);
    nav.navigate('OrderDetail',{orderId:row.id,receiveNow:true});
  },[nav]);

  const renderItem=useCallback(({item}:{item:OrderRow})=>{
    const bits:string[]=[];
    if(item.linesCount!=null)bits.push(`${item.linesCount} line${item.linesCount===1?'':'s'}`);
    if(item.total!=null)bits.push(`$${item.total.toFixed(2)}`);
    const subtitle=bits.join(' • ');
    const pillText=item.displayStatus||item.status||'—';
    const isSubmitted=STATUS_GROUPS.submitted(String(item.status||'draft'));
    return(
      <View style={S.row}>
        <TouchableOpacity style={S.left} onPress={()=>openRow(item)} activeOpacity={0.8}>
          <Text style={S.rowTitle}>{item.supplierName||'Supplier'}</Text>
          <Text style={S.rowSub}>{subtitle||'—'}</Text>
          <View style={S.pill}><Text style={S.pillText}>{pillText}</Text></View>
        </TouchableOpacity>
        {isSubmitted?(
          <TouchableOpacity style={S.smallBtn} onPress={()=>startReceive(item)}>
            <Text style={S.smallBtnText}>Receive</Text>
          </TouchableOpacity>
        ):null}
      </View>
    );
  },[openRow,startReceive]);

  const keyExtractor = useCallback((r:OrderRow)=>r.id,[]);

  const Header = (
    <View style={S.top}>
      <View>
        <Text style={S.title}>Orders</Text>
        <View style={{height:8}}/>
        <View style={S.segWrap}>
          <TouchableOpacity onPress={()=>setTab('drafts')} style={[S.segBtn,tab==='drafts'&&S.segActive]}>
            <Text style={[S.segText,tab==='drafts'&&S.segTextActive]}>Drafts</Text>
          </TouchableOpacity>
          <TouchableOpacity onPress={()=>setTab('submitted')} style={[S.segBtn,tab==='submitted'&&S.segActive]}>
            <Text style={[S.segText,tab==='submitted'&&S.segTextActive]}>Submitted</Text>
          </TouchableOpacity>
          <TouchableOpacity onPress={()=>setTab('received')} style={[S.segBtn,tab==='received'&&S.segActive]}>
            <Text style={[S.segText,tab==='received'&&S.segTextActive]}>Received</Text>
          </TouchableOpacity>
        </View>
      </View>
      <TouchableOpacity onPress={()=>nav.navigate('NewOrder')} style={S.addBtn}>
        <Text style={S.addText}>New Order</Text>
      </TouchableOpacity>
    </View>
  );

  const onRefresh = useCallback(async ()=>{
    setRefreshing(true);
    setTimeout(()=>setRefreshing(false), 200);
  },[]);

  if (tab !== 'received') {
    // FlatList for Drafts / Submitted
    return(
      <View style={S.wrap}>
        {Header}
        <FlatList
          data={rows}
          keyExtractor={keyExtractor}
          renderItem={renderItem}
          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}
          ListEmptyComponent={<View style={S.empty}><Text style={S.emptyText}>No {tab} orders.</Text></View>}
          contentContainerStyle={{paddingBottom:20}}
        />
      </View>
    );
  }

  // SectionList for Received (grouped by day/week)
  const sections = useMemo(()=>groupReceived(rows),[rows]);
  return (
    <View style={S.wrap}>
      {Header}
      <SectionList
        sections={sections}
        keyExtractor={keyExtractor}
        renderItem={renderItem}
        renderSectionHeader={({section})=>(
          <View style={S.sectionHeader}><Text style={S.sectionTitle}>{section.title}</Text></View>
        )}
        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}
        ListEmptyComponent={<View style={S.empty}><Text style={S.emptyText}>No received orders.</Text></View>}
        contentContainerStyle={{paddingBottom:20}}
      />
    </View>
  );
}
