import useDebouncedValue from "../../utils/useDebouncedValue";
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ActivityIndicator, Alert, FlatList } from 'react-native';
import { useNavigation, useRoute } from '@react-navigation/native';
import { collection, onSnapshot } from 'firebase/firestore';
import { db } from '../services/firebase';

type RouteParams = { venueId: string; departmentId: string };
type AreaRow = { id: string; name: string; started: boolean; complete: boolean };

export default function AreaSelectionScreen() {
  const nav = useNavigation<any>();
  const route = useRoute<any>();
  const { venueId, departmentId } = (route.params as RouteParams) ?? {};
  const [loading, setLoading] = useState(true);
  const [rows, setRows] = useState<AreaRow[]>([]);

  useEffect(() => {
    if (!venueId || !departmentId) { Alert.alert('Missing department'); nav.goBack(); return; }
    setLoading(true);
    const unsub = onSnapshot(collection(db, 'venues', venueId, 'departments', departmentId, 'areas'), (as) => {
      const list: AreaRow[] = [];
      as.forEach(a => {
        const d:any = a.data();
        list.push({ id:a.id, name:d?.name??a.id, started:!!d?.startedAt, complete:!!d?.completedAt });
      });
      list.sort((a,b)=>{ if(a.complete&&!b.complete) return 1; if(!a.complete&&b.complete) return -1; return a.name.localeCompare(b.name); });
      setRows(list);
      setLoading(false);
    }, (e)=>{ setLoading(false); Alert.alert('Load failed', e?.message??'Unknown'); });
    return () => unsub();
  }, [venueId, departmentId]);

  const status = (r: AreaRow) => r.complete ? {t:'Complete', s:S.pillGreen}
    : r.started ? {t:'In Progress', s:S.pillAmber} : {t:'Not Started', s:S.pillGray};

  const onArea = (r: AreaRow) => {
    if (r.complete) { Alert.alert(r.name,'Completed (read-only).'); return; }
    nav.navigate('StockTakeAreaInventory', { venueId, departmentId, areaId: r.id });
  };

  if (loading) return <View style={S.center}><ActivityIndicator/></View>;
  return (
    <View style={S.container}>
      <FlatList
        data={rows}
        keyExtractor={(r)=>r.id}
        renderItem={({item})=>{
          const st=status(item);
          return (
            <TouchableOpacity style={S.card} onPress={()=>onArea(item)}>
              <Text style={S.name}>{item.name}</Text>
              <View style={[S.pill,st.s]}><Text style={S.pillText}>{st.t}</Text></View>
            </TouchableOpacity>
          );
        }}
        ItemSeparatorComponent={()=> <View style={{height:10}}/>}
      />
    </View>
  );
}

const S = StyleSheet.create({
  container:{flex:1,padding:16,backgroundColor:'#fff'},
  center:{flex:1,alignItems:'center',justifyContent:'center'},
  card:{backgroundColor:'#F3F4F6',padding:16,borderRadius:12,flexDirection:'row',alignItems:'center',justifyContent:'space-between'},
  name:{fontSize:16,fontWeight:'700'},
  pill:{paddingVertical:6,paddingHorizontal:10,borderRadius:999},
  pillText:{color:'#111827',fontWeight:'700'},
  pillGray:{backgroundColor:'#E5E7EB'},
  pillAmber:{backgroundColor:'#FDE68A'},
  pillGreen:{backgroundColor:'#BBF7D0'},
});
