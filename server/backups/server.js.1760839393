/**
 * TallyUp AI Server (ESM)
 * - No new dependencies required
 * - Works with "type": "module"
 * - Listens on 0.0.0.0 for device access (LAN/adb reverse)
 * - CORS open for dev
 * - Entitlement + Promo endpoints hard-enabled for Sprint testing
 */

import 'dotenv/config';             // loads .env if present (ESM-friendly)
import express from 'express';      // ESM import (package.json has "type":"module")

// ---------- Config ----------
const app = express();
const PORT = process.env.PORT ? Number(process.env.PORT) : 3001;

// CORS (simple, no extra package)
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*'); // dev-only
  res.header('Access-Control-Allow-Methods', 'GET,POST,OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  if (req.method === 'OPTIONS') return res.sendStatus(204);
  next();
});

app.use(express.json({ limit: '2mb' }));

// ---------- Health ----------
app.get('/health', (req, res) => {
  res.json({ ok: true, service: 'tallyup-ai-server', ts: Date.now() });
});

// ---------- Entitlement (hard-enabled for Sprint testing) ----------
app.get('/api/entitlement', (req, res) => {
  // For sprint testing we return entitled = true for both features.
  res.json({
    entitled: true,
    features: { aiSuggest: true, varianceExplain: true },
    source: 'dev-hardwired',
    ts: Date.now(),
  });
});

// ---------- Promo validation (checks DEV_PROMO_CODES) ----------
function parseDevPromoCodes() {
  const raw = process.env.DEV_PROMO_CODES || '';
  return raw
    .split(',')
    .map(s => s.trim().toUpperCase())
    .filter(Boolean);
}

app.post('/api/validate-promo', (req, res) => {
  const { code } = (req.body || {});
  const codes = parseDevPromoCodes();
  const ok = typeof code === 'string' && codes.includes(code.trim().toUpperCase());
  res.json({
    ok,
    entitled: ok,
    appliedCode: ok ? code : null,
    ts: Date.now(),
  });
});

// ---------- AI Suggested Orders (stub for now) ----------
// Client wonâ€™t hit this until paywall is cleared. Return a safe, normalized payload.
app.post('/api/suggest-orders', async (req, res) => {
  // You can later wire Firestore + OpenAI here. For now, return an empty but valid shape.
  res.json({
    buckets: {},                 // { [supplierId]: { supplierName?: string, lines: [{productId, productName, qty, cost?}] } }
    unassigned: { lines: [] },   // same line shape as above
    meta: { source: 'stub', ts: Date.now() },
  });
});

// ---------- Start ----------
app.listen(PORT, '0.0.0.0', () => {
  console.log(`[AI SERVER] listening on http://localhost:${PORT}`);
});
